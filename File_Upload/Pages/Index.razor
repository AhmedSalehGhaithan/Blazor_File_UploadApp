@page "/"
@using FileUploadLibrary;
@inject IConfiguration config;
@inject IConfiguration config;
@inject ISqlDataAccess sql
<PageTitle>Upload files App</PageTitle>

<h1>Upload files</h1>

<EditForm Model="newCustomer" OnValidSubmit="SubmitFoem">
    <div>
        <label for="FirstName">First Name:</label>
        <InputText id="FirstName" class="form-control" @bind-Value="newCustomer.FirstName"/>
    </div>

    <div>
        <label for="LastName">Last Name:</label>
        <InputText id="LastName" class="form-control" @bind-Value="newCustomer.LastName" />
    </div>

    <div>
        <label for="profilePicture">Profile Picture:</label>
        <InputFile id="profilePicture" OnChange="@LoadFile" multiple accept=".png,.jpg,.jpeg" />
    </div>

    <button class="btn btn-primary mt-3" type="submit">Create</button>
</EditForm>

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach(var item in errors)
        {
            <li>@item</li>
        }
    </ul>
}

@if(customers is not null)
{
    <h2>Existing Customer</h2>
    <table class="table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>First name</th>
                <th>Last Name</th>
                <th>Profile</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var c in customers)
            {
                <tr>
                    <td>@c.Id</td>
                    <td>@c.FirstName</td>
                    <td>@c.LastName</td>
                    <td>
                        @if(string.IsNullOrWhiteSpace(c.FileName) == false)
                        {
                            <img style="border-radius:50%" src="@CreateWebPath(c.FileName)" width="50" height="50"/>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code{
    private long maxFileSize = 1024 * 1024 * 3;//represent 3Mg

    private List<string> errors = new();

    private CustomerModel newCustomer = new();

    private IBrowserFile? file;

    
    private  List<CustomerModel>? customers;

    private async Task LoadCustomers()
    {
        customers = await sql.LoadData<CustomerModel>("dbo.spCustomer_GetAll", "Default", null);
        
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }
    private async Task SubmitFoem()
    {
        try
        {
            string relativePath = await CapureFile();
            newCustomer.FileName = relativePath;

            await sql.SaveData("dbo.spCustomer_Insert", "Default",newCustomer);

            newCustomer = new();
            file = null;
            errors.Clear();

            await LoadCustomers();
        }
        catch (Exception ex)
        {
            errors.Add($"Error {ex.Message}");
        }
    }
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
    }
    private async Task<string> CapureFile()
    {
        if (file is null) return "";


        try
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "tcorey", newFileName);

            string relativePAth = Path.Combine("tcorey", newFileName);

            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "tcorey"));

            await using FileStream fileStream = new(path, FileMode.Create);

            await file.OpenReadStream(maxFileSize).CopyToAsync(fileStream);
            return relativePAth;
        }
        catch (Exception ex)
        {
            errors.Add($"File : {file.Name} Error : {ex.Message}");
            throw;
        }
    }
}

